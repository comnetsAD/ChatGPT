Yes, there exists a stable matching each time with no strong instability. If tied members are randomly assigned to a higher and lower preference, then the G-S algorithm can be applied to the two groups as if all preferences were distinct. The m-members would still propose sequentially, in order of preference (most preferred first). If an m-member is indifferent between 2 w-members, one can arbitrarily be proposed to first. The same conditions would hold for the w-members, where they accept the proposal if they are currently unmatched or prefer the proposing m-member to their current match. In the case of indifference towards the proposing m-member and the present match, the w-member would not accept. 
 
This algorithm would still end when all members are matched, which would take at most n2 iterations, for every m-member to propose to every w-member. Every member would end up matched at the termination of the algorithm, since the only way for a w-member to end up unmatched is if they were never proposed to, but the only way for an m-member to end up unmatched is if they propose to every w-member and get rejected, which would lead to a contradiction if both were the case. Stability is guaranteed with no strong instabilities because if there were to be a strongly unstable match (say, m1 and w1), that would mean that m1 and w1 were not matched but each preferred each other to their current matches (and were not indifferent). In this case, m1 either did or did not propose to w1. If m1 proposed to w1, that means w1 rejected m1, which means w1 did not prefer m1 to their current match, so m1 and w1 are not unstable. If m1 did not propose to w1, then m1 was lower in the list of preferences than m1â€™s current match, so m1 and w1 are not unstable. 

