Assume u is less than v, or u -< v, in case of xu < xy. Then apply this to sets: if S is a set of nodes, assume u -< S if u has a lower value than any node in S. The following I starts at the tree's root r and check if r is smaller than its two children. If this is the case, the root is a local minimum. Otherwise, we go on to a smaller child and repeat the process.
 
The algorithm method stops when we reach either (1) a node v that is smaller than both of its children, or (2) a leaf w. In the first example, we return v, whereas in the second, we return w. The algorithm flow probes the tree 0(d) = 0(log n) times; we must now prove that the returned result is a local minimum. If the root r is returned, it is a local minimum, as previously discussed. so, the returned value proved as a local minimum. The algorithm flow probes the tree 0(d) = 0(log n) times; demonstrates that the returned value is a local minimum. As previously established, if the root r is returned, it is a local minimum. As a result, the returned value proved to be a local minimum. If we stop at instance (2), w is a local minimum because it is less than its parent as the case we did.

