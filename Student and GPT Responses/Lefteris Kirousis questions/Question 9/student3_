Given that T is a complete binary tree, each node can have at most 3 neighboring nodes. Starting from the root, we would probe the value of the current node, as well as the values of the 2 children, if the node is not a leaf. If either of the children have values lower than the current node, set that child as the new current node, and repeat the process. If both children have values higher than the current node, return the current node as a local minimum. We do not need to check the value of the parent if there is one, because if we move down the tree starting at the root, we would only reach a node if its parentâ€™s value is greater than its own value.
Because the depth of the tree is less than logn + 1, since we have n = 2^d - 1 nodes, we would need to probe at most 3d times, which is O(logn).

