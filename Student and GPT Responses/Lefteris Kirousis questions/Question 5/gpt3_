
One way to find such a node u is to run three breadth-first search (BFS) algorithms. The first BFS algorithm starts at node s and finds the shortest distance from s to t1. The second BFS algorithm starts at node s and finds the shortest distance from s to t2. The third BFS algorithm starts at node s and finds the longest distance from s while ensuring that the distance from s to t1 and the distance from s to t2 through the node u are not greater than the respective distances found in the first and second BFS algorithms. The running time of this algorithm is O(m) because it uses BFS which has a time complexity of O(m+n) and we are running it three times.

