Run BFS searches in graph G for the two nodes t1 and t1.  The shortest paths from t1 to s and t2 to s, also contains u to t1 and u to t2 as given above. So, it gives us the ability to apply on the given conditions on the third BFS. Then, using BFS on the first layer which means on the path from s to u. Checking for each node neighboring with the current node with the length of distance added to the value of u pathing to t1 is equal or less than the length of distance of t1 pathing to s, and same for the distance plus the value of u pathing to t2 is less than or equal the length of t2 to s.  In case of fitting the condition, adding the node to the explored path. Reusing the BFS searches algorithm until it does not work.  O(m) is the complexity of this algorithm as it uses the worst-case scenario in exploring the graph by edges as it explores the whole graph before finding u with m edges. 

