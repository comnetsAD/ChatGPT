The statement is not always true, as disproved by counterexample.
A counterexample can be constructed by considering f(n) = n^2 and g(n) = n.
It is clear that f(n) is O(g(n)) as f(n) <= c1 * g(n) for c1 = 1 and n > n1 = 1
However, log f(n) = 2 log n, while log g(n) = log n
Therefore, 2 log n is not O(log n), and thus log f(n) is not O(log g(n))
While in some cases like g(n) = n^2 and f(n) = n^3 then log f(n) is O(log g(n)) as log f(n) = 3 log n and log g(n) = 2 log n
It's worth mentioning that the big O notation is a comparison of the rate of growth between functions, and it doesn't take into account the base of logarithm function.
