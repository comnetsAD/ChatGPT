#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int main() {
    int fd[2]; // file descriptor for the unnamed pipe

    // create the pipe
    if (pipe(fd) == -1) {
        perror("pipe");
        exit(1);
    }

    pid_t pid = fork(); // create the child process

    if (pid == -1) {
        perror("fork");
        exit(1);
    } else if (pid == 0) { // child process
        close(fd[0]); // close the read end of the pipe in the child
        char buffer[100];
        while(1) {
            printf("Enter a string: ");
            scanf("%s", buffer);
            write(fd[1], buffer, strlen(buffer) + 1); // send the string to the parent
            read(fd[1], buffer, 100); // read the result from the parent
            printf("The string is %s\n", buffer);
        }
    } else { // parent process
        close(fd[1]); // close the write end of the pipe in the parent
        char buffer[100];
        while(1) {
            read(fd[0], buffer, 100); // read the string from the child
            int isPalindrome = 1;
            int i;
            for (i = 0; i < strlen(buffer)/2; i++) {
                if (buffer[i] != buffer[strlen(buffer) - i - 1]) {
                    isPalindrome = 0;
                    break;
                }
            }
            if (isPalindrome) {
                write(fd[1], "palindrome", 10); // send the result to the child
            } else {
                write(fd[1], "not palindrome", 14); // send the result to the child
            }
        }
    }

    return 0;
}

This program uses an unnamed pipe to allow communication between a parent and child process. The pipe is created using the pipe() function, and the child process is created using the fork() function.

In the child process, it reads a string from the user using scanf() and sends it to the parent using the write() function. Then it reads the result from the parent using the read() function and prints it using printf().

In the parent process, it reads the string from the child using the read() function. Then it checks if the string is a palindrome or not. If the string is a palindrome, it sends the result "palindrome" to the child using the write() function. If it's not a palindrome it sends the result "not palindrome" to the child.

The parent process and the child process will keep running in an infinite loop, so the user can enter multiple strings and check if they are palindromes or not.

It's important to note that the close() function is used to close the read and write ends of the pipe that are not needed in each process. This is because the parent and child each only need to read or write to the pipe, not both.

