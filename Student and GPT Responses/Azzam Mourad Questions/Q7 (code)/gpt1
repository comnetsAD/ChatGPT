#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_THREADS 3
#define ARRAY_SIZE 10

int array[ARRAY_SIZE];

void *calculate_average(void *param);
void *calculate_minimum(void *param);
void *calculate_maximum(void *param);

int main(int argc, char *argv[]) {
    pthread_t thread_id[NUM_THREADS];
    int average, minimum, maximum;

    // read array from user
    for (int i = 0; i < ARRAY_SIZE; i++) {
        printf("Enter a number for array[%d]: ", i);
        scanf("%d", &array[i]);
    }

    // create threads
    pthread_create(&thread_id[0], NULL, calculate_average, (void *)&average);
    pthread_create(&thread_id[1], NULL, calculate_minimum, (void *)&minimum);
    pthread_create(&thread_id[2], NULL, calculate_maximum, (void *)&maximum);

    // wait for threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(thread_id[i], NULL);
    }

    // print results
    printf("Average: %d\n", average);
    printf("Minimum: %d\n", minimum);
    printf("Maximum: %d\n", maximum);

    return 0;
}

void *calculate_average(void *param) {
    int *average = (int *)param;
    int sum = 0;
    for (int i = 0; i < ARRAY_SIZE; i++) {
        sum += array[i];
    }
    *average = sum / ARRAY_SIZE;
    pthread_exit(0);
}

void *calculate_minimum(void *param) {
    int *minimum = (int *)param;
    *minimum = array[0];
    for (int i = 1; i < ARRAY_SIZE; i++) {
        if (array[i] < *minimum) {
            *minimum = array[i];
        }
    }
    pthread_exit(0);
}

void *calculate_maximum(void *param) {
    int *maximum = (int *)param;
    *maximum = array[0];
    for (i = 1; i < size; i++) {
    if (array[i] > maximum) {
        maximum = array[i];
        }
    }
    pthread_exit(0);
}

int main() {
    int i;
    pthread_t average_thread, minimum_thread, maximum_thread;
    printf("Enter the size of the array: ");
    scanf("%d", &size);
    printf("Enter the elements of the array: ");
    for (i = 0; i < size; i++) {
        scanf("%d", &array[i]);
    }

    pthread_create(&average_thread, NULL, calc_average, NULL);
    pthread_create(&minimum_thread, NULL, calc_minimum, NULL);
    pthread_create(&maximum_thread, NULL, calc_maximum, NULL);

    pthread_join(average_thread, NULL);
    pthread_join(minimum_thread, NULL);
    pthread_join(maximum_thread, NULL);

    printf("Average: %f\n", average);
    printf("Minimum: %d\n", minimum);
    printf("Maximum: %d\n", maximum);

    return 0;
}


