#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <wait.h>

#define MAX_SIZE 100 // define the maximum size that the input string can have

int main(int argc, char const *argv[])
{
int fd[2]; //pipe from child to parent
pipe(fd); // create pipe and initialize descriptors
int fd2[2];//=pipe from parent to child
pipe(fd2); // create pipe and initialize descriptors
pid_t child = fork(); // fork child
if (child<0){  // check if child creation failed
        perror("Fork Failed");
        exit(EXIT_FAILURE); 
    }
if(child == 0) {// in child process
close(fd[0]); // close read end of pipe 1 
close(fd2[1]); // close write end of pipe 2
// *****keep reading strings*****
char input[MAX_SIZE]; //declare input string

printf("Enter a string\n");
if(fgets(input, sizeof(input), stdin) == NULL) { // scan a string from the user and check if things go wrong while input
printf("%s\n", "Error while reading input from user");
} 
else {
write(fd[1], input, strlen(input)); // write on pipe 1 input string
// display the string input
printf("%s\n", "Child wrote", input);
}
close(fd[1]); // close the write end of pipe 1
int num_vowels;
read(fd2[0], &num_vowels, sizeof(int)); // using pipe 2 read end, read from parent 
close(fd2[0]); // close pipe 2 read end 

printf("Child received numbers of vowels calculated by parents as %d \n", num_vowels); //print received results
printf("Message received!!");
// *****continue reading new strings******
}

else if(pid > 0) { // in parent process
close (fd[1]); // close write end of pipe 1
close(fd2[0]); // close read end of pipe 2 
char buff[100]; // used to receive input string
int n = 0; // count vowel numbers

read(fd[0], buff, sizeof(buff)); // read input string from pipe 1 and store it in buff array
// display the string and the number of bytes received
printf("Parent read %s\n", buff);
}
close(fd[0]); // close pipe 1 read end 
for (int i=0;i<sizeof(buff);i++){
      if (buff[i] == 'a' || buff[i] == 'e' || buff[i] == 'i' || buff[i] == 'o' || buff[i] == 'u')
          n++; //count the number of vowels
}
write(fd2[1], &n, sizeof(int)); // write to child the number of vowels calculated
close(fd2[1]); // close the write end of pipe 1
}
return 0;
}


