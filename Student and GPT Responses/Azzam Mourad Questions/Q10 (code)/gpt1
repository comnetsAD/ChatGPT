#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_COMMANDS 4
#define MAX_ARGS 16

void parse_input(char* input, char** commands, int* num_commands)
{
    char* token = strtok(input, "|");
    while(token != NULL)
    {
        commands[*num_commands] = token;
        (*num_commands)++;
        token = strtok(NULL, "|");
    }
}

void parse_args(char* command, char** args)
{
    char* token = strtok(command, " ");
    int i = 0;
    while(token != NULL)
    {
        args[i] = token;
        i++;
        token = strtok(NULL, " ");
    }
    args[i] = NULL;
}

int main(void)
{
    char input[256];
    char* commands[MAX_COMMANDS];
    int num_commands = 0;
    int status;

    while(1)
    {
        printf("myShell> ");
        fgets(input, 256, stdin);
        input[strcspn(input, "\n")] = 0;
        parse_input(input, commands, &num_commands);

        int pipes[num_commands - 1][2];
        pid_t pid;

        for(int i = 0; i < num_commands - 1; i++)
            pipe(pipes[i]);

        for(int i = 0; i < num_commands; i++)
        {
            pid = fork();

            if(pid < 0)
            {
                fprintf(stderr, "Fork Failed");
                return 1;
            }
            else if(pid == 0)
            {
                char* args[MAX_ARGS];
                parse_args(commands[i], args);

                if(i != 0)
                {
                    dup2(pipes[i-1][0], 0);
                    close(pipes[i-1][0]);
                    close(pipes[i-1][1]);
                }

                if(i != num_commands - 1)
                {
                    dup2(pipes[i][1], 1);
                    close(pipes[i][0]);
                    close(pipes[i][1]);
                }

                execvp(args[0], args);
                exit(0);
            }
        }

        for(int i = 0; i < num_commands - 1; i++)
        {
            close(pipes[i][0]);
            close(pipes[i][1]);
        }

        for(int i = 0; i < num_commands; i++)
            wait(&status);

        num_commands = 0;
    }
    return 0;
}

