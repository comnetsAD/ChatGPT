#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/shm.h>
#include <sys/ipc.h>

#define MAX_LENGTH 1000

int main(int argc, char* argv[]) {
    int shmid;
    key_t key;
    int* shm;
    pid_t pid;

    // check for valid input
    if (argc != 2) {
        printf("Usage: %s <starting number>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int n = atoi(argv[1]); // starting number

    // create shared memory
    key = ftok(".", 'a');
    shmid = shmget(key, MAX_LENGTH * sizeof(int), IPC_CREAT | 0666);
    shm = (int*) shmat(shmid, NULL, 0);

    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // child process
        int i = 0;
        while (n != 1) {
            shm[i++] = n;
            if (n % 2 == 0) {
                n /= 2;
            } else {
                n = (3 * n) + 1;
            }
        }
        shm[i] = n; // add the last 1 to the sequence
        exit(EXIT_SUCCESS);
    } else { // parent process
        wait(NULL); // wait for child to finish

        int i = 0;
        while (shm[i] != 1) {
            printf("%d, ", shm[i++]);
        }
        printf("%d\n", shm[i]); // print the last 1 without a comma

        // detach and remove shared memory
        shmdt(shm);
        shmctl(shmid, IPC_RMID, NULL);
    }

    return 0;
}


