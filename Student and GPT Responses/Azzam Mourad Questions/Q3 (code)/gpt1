#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/shm.h>
#include <sys/wait.h>

#define MAX_LENGTH 100

int main(int argc, char *argv[]) {
    int shmid;
    int *shmptr;
    int N;
    pid_t pid;

    // check if a starting number is provided
    if (argc != 2) {
        printf("Please provide a starting number as a command line argument.\n");
        exit(EXIT_FAILURE);
    }

    N = atoi(argv[1]);

    // create shared memory
    shmid = shmget(IPC_PRIVATE, sizeof(int) * MAX_LENGTH, IPC_CREAT | 0666);
    if (shmid < 0) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    shmptr = shmat(shmid, NULL, 0);
    if (shmptr == (int *) -1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // child process
        int i = 0;
        shmptr[i] = N;
        while (N != 1) {
            if (N % 2 == 0) {
                N = N / 2;
            } else {
                N = (3 * N) + 1;
            }
            i++;
            shmptr[i] = N;
        }
    } else { // parent process
        wait(NULL); // wait for the child process to finish
        int i;
        for (i = 0; i < MAX_LENGTH; i++) {
            if (shmptr[i] == 1) {
                break;
            }
            printf("%d, ", shmptr[i]);
        }
        printf("1\n");

        // detach and remove shared memory
        shmdt(shmptr);
        shmctl(shmid, IPC_RMID, NULL);
    }

    return 0;
}


