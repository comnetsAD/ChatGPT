N= N/2 if N is even
Or 
N=(3xN)+1 if N is odd
The conjecture states that when this algorithm is continually applied, all positive integers will eventually reach 1. For example, if N=35, the sequence i 
            35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1
Write a C program using the fork() system call that generates this sequence in the child and saves it in a shared memory, then print the final result on the screen in the parent. The starting number will be provided from the command line. For example, if 8 is passed as parameter on the command line, the output will be 8, 4, 2, 1. If 3 is passed as parameter, the output will be 3, 10, 5, 16, 8, 4, 2, 1.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/wait.h>
#include <string.h>

#define MAX_LENGTH 100

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Error: missing starting number\n");
        exit(EXIT_FAILURE);
    }
    int start = atoi(argv[1]);
    int shmid;
    int *shared_memory;
    pid_t pid;

    shmid = shmget(IPC_PRIVATE, MAX_LENGTH, IPC_CREAT | 0666);
    shared_memory = shmat(shmid, NULL, 0);

    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // child process
        int n = start;
        int i = 0;
        while (n != 1) {
            shared_memory[i] = n;
            i++;
            if (n % 2 == 0) {
                n = n / 2;
            } else {
                n = (3 * n) + 1;
            }
        }
        shared_memory[i] = n;
        exit(0);
    } else { // parent process
        wait(NULL);
        int i = 0;
        while (shared_memory[i] != 1) {
            printf("%d, ", shared_memory[i]);
            i++;
        }
        printf("%d\n", shared_memory[i]);
        shmdt(shared_memory);
        shmctl(shmid, IPC_RMID, NULL);
    }

    return 0;
}



