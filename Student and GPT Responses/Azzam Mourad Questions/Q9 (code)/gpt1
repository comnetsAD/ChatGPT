#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 8080
#define MAX_CLIENTS 5

void* handle_client(void* arg);
int evaluate_expression(char* expr);

int main() {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Forcefully attaching socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, &opt, sizeof(opt))) {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons( PORT );

    // Forcefully attaching socket to the port 8080
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address))<0) {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, MAX_CLIENTS) < 0) {
        perror("listen");
        exit(EXIT_FAILURE);
    }

    // Continuously wait for new clients
    while (1) {
        printf("Waiting for new client...\n");
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0) {
            perror("accept");
            exit(EXIT_FAILURE);
        }

        // Create a new thread for each client
        pthread_t client_thread;
        if (pthread_create(&client_thread, NULL, handle_client, (void *)&new_socket) < 0) {
            perror("could not create thread");
            exit(EXIT_FAILURE);
        }
    }
    return 0;
}

// Thread function to handle a single client
void* handle_client(void* arg) {
    int client_socket = *(int*)arg;
    char buffer[256];
    int valread;

    while (1) {
        memset(buffer, 0, 256);

        // Read expression from client
        valread = read(client_socket, buffer, sizeof(buffer));
        if (valread < 0) {
            perror("read from client failed");
            exit(EXIT_FAILURE);
        }
        printf("Received expression from client: %s\n", buffer);

        // Evaluate expression and send result to client
        int result = evaluate_expression(buffer);
        char result_str[256];
        sprintf(result_str, "%d", result);
        send(client_socket, result_str, strlen(result_str), 0);
    }
}

// Function to evaluate an arithmetic expression
int evaluate_expression(char* expr) {
    int result = 0;
    char op;
    sscanf(expr, "%d %c %d", &a, &op, &b);
    switch (op) {
        case '+':
            result = a + b;
            break;
        case '-':
            result = a - b;
            break;
        case '*':
            result = a * b;
            break;
        case '/':
            result = a / b;
            break;
        }
    return result;
}

