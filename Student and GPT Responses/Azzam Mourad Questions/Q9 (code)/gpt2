#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <pthread.h>

#define PORT_NUMBER 12345
#define MAX_CLIENTS 5

int clients[MAX_CLIENTS];
pthread_t threads[MAX_CLIENTS];
int num_clients = 0;

void *handle_client(void *arg) {
    int client_socket = *(int *)arg;

    char buffer[256];
    bzero(buffer,256);
    int n;

    while((n = read(client_socket,buffer,255)) > 0) {
        int result = 0;
        sscanf(buffer, "%d", &result);
        char *token = strtok(buffer, " ");
        int num1 = atoi(token);
        token = strtok(NULL, " ");
        char op = token[0];
        token = strtok(NULL, " ");
        int num2 = atoi(token);

        switch(op) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                result = num1 / num2;
                break;
            default:
                break;
        }

        sprintf(buffer, "%d", result);
        n = write(client_socket,buffer,strlen(buffer));
        bzero(buffer,256);
    }

    if (n < 0) {
        perror("Error reading from socket");
        exit(1);
    }
}

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        perror("Error creating socket");
        exit(1);
    }

    struct sockaddr_in server_address;
    bzero((char *) &server_address, sizeof(server_address));
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(PORT_NUMBER);

    if (bind(server_socket, (struct sockaddr *) &server_address, sizeof(server_address)) < 0) {
        perror("Error binding socket");
        exit(1);
    }

    listen(server_socket,5);

    while (1) {
        int client_socket = accept(server_socket, NULL, NULL);
        if (client_socket < 0) {
            perror("Error accepting connection");
            exit(1);
        }

        if (num_clients >= MAX_CLIENTS) {
            close(client_socket);
            continue;
        }

        clients[num_clients] = client_socket;
        pthread_create(&threads[num_clients], NULL, handle_client, &clients[num_clients]);
        num_clients++;
    }
    close(server_socket);
    return 0;
}


