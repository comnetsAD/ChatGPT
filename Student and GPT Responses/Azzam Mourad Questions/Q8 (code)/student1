
Server:
#include <unistd.h> // / header for unix specic functions declarations : fork(), getpid(), getppid(), sleep()
#include <stdio.h>  // header for input and output from console : printf, perror
#include <stdlib.h> // header for general functions declarations: exit() and also has exit macros such as EXIT_FAILURE - unsuccessful execution of a program
#include <sys/socket.h> // header for socket specific functions and macros declarations
#include <netinet/in.h> //header for MACROS and structures related to addresses "sockaddr_in", INADDR_ANY 
#include <string.h> // header for string functions declarations: strlen()
#include <pthread.h> // header for thread functions declarations: pthread_create, pthread_join, pthread_exit
// compile your code with: gcc -o output code.c -lpthread


#define PORT 5564 //or 5554 tcp client server port
#define NUM_CLIENTS 2

// Function that calculates sum of 5 elements of an array
void* HandleClient(void* new_socket)
{

  pthread_detach(pthread_self()); // detach the thread as we don't need to synchronize/join with the other client threads, their execution/code flow does not depend on our termination/completion 
  int socket = *(int*)new_socket;
  free(new_socket);
  printf("handling new client in a thread using socket: %d\n", socket);
  printf("Listening to client..\n"); // while printing make sure to end your strings with \n or \0 to flush the stream, other wise if in anyother concurent process is reading from socket/pipe-end with standard input/output redirection, it will keep on waiting for stream to end. 
  
  // variable such as message buffers to receive and send messages
  char message[1024] = {0}; //to receive message
  recv(socket, message, sizeof(message),0); // receive message from client
  printf("Recieved message from the client: %s\n", message);

  char message2[1024] = "Hello back!"; // send hello back
  send(socket, message2, strlen(message2), 0);

  char message3[1024] = {0}; // to receive arrays of integers
  recv(socket, message3, sizeof(message3),0);
  printf("Received array: %s\n", message3);

//convert arrays of strings to integers
  int sum = 0;
  char tmp[1024];
  int position = 0;
  int array_pos = 0;
  int array[100];
  int tmp_int = 0;
  int i = 0;
 
  while(1){
    //   printf("enter\n");
    printf("%c",message3[i]);
      if (message3[i] == ' '){
        tmp[position]='\0';
        tmp_int = atoi(tmp);
        array[array_pos] = tmp_int;
      for (int j=0;j<position;j++)
          tmp[j] = 0;
      position = 0;
      array_pos ++;
      }
      else if (message3[i] == '\0'){
        tmp[position]='\0';
        tmp_int = atoi(tmp);
        array[array_pos] = tmp_int;  
        array_pos ++;   
        break;
      }
      else{
        tmp[position] = message3[i];
        position ++;
      }
      i++;
  }

  //add the converted integers together
  for (int z=0;z<array_pos;z++){
      sum += array[z];
  }
//   printf("%d\n",sum);

// convert the sum to string and send to client
    char message4[1024];
    int n= 0;
    i=0;
    char temp[100];
    n = sum % 10;
    while (n>0)
    {
        temp[i++] = n + '0';
        sum = (sum - n) / 10;
        n = sum % 10;
    }
    temp[i] = '\0';
    for (i=0; i<=strlen(temp)-1; i++)
    {
        message4[i] = temp[strlen(temp)-i-1];
    }
    message4[i] = '\0';
    printf("The sum which will return to the client is: %s\n", message4);
    send(socket, message4, strlen(message4), 0);


  close(socket); // close the conneciton with client

  pthread_exit(NULL);// terminate the thread
}


int main()// main function
{
  int sock1, sock2, valread;
  struct sockaddr_in address; // structure for storing addres; local interface and port 
  int addrlen = sizeof(address);

  // Creating socket file descriptor with communication: domain of internet protocol version 4, type of SOCK_STREAM for reliable/conneciton oriented communication, protocol of internet  
  if ((sock1 = socket(AF_INET, SOCK_STREAM, 0)) == 0) // checking if socket creation fail
  {
    perror("socket failed");
    exit(EXIT_FAILURE);
  }

  // setting the address to be bind to socket
  address.sin_family = AF_INET;
  address.sin_addr.s_addr = htonl(INADDR_ANY);
  address.sin_port = htons(PORT);

  // attaching socket to addresses (any/all local ip with port 5564)
  if (bind(sock1, (struct sockaddr *)&address,
   sizeof(address)) < 0) // checking if bind fails
  {
    perror("bind failed");
    exit(EXIT_FAILURE);
  }

  if (listen(sock1, NUM_CLIENTS) < 0) // defining for socket length of queue for pending client connections
  {
    perror("Listen Failed");
    exit(EXIT_FAILURE);
  }

  while (1) // to keep server alive for infintiy
  {

    if ((sock2 = accept(sock1, (struct sockaddr *)&address,
     (socklen_t *)&addrlen)) < 0) // accepting the client connection with creation/return of a new socket for the established connection to enable dedicated communication (active communication on a new socket) with the client
    {
      perror("accept");
      exit(EXIT_FAILURE);
    }

    int rc; // return value from pthread_create to check if new thread is created successfukky                           */
    pthread_t  thread_id;  // thread's ID (just an integer, typedef unsigned long int) to indetify new thread
    int* new_socket = (int*)malloc(sizeof(int)); // for passing safely the integer socket to the thread
    if ( new_socket == NULL ) {
      fprintf(stderr, "Couldn't allocate memory for thread new socket argument.\n");
      exit(EXIT_FAILURE);
    }
    *new_socket = sock2;

    // create a new thread that will handle the communication with the newly accepted client
    rc = pthread_create(&thread_id, NULL, HandleClient, new_socket);  
    if(rc)			// if rc is > 0 imply could not create new thread 
    {
      printf("\n ERROR: return code from pthread_create is %d \n", rc);
      exit(EXIT_FAILURE);
    }

  }

  close(sock1);
  
  pthread_exit(NULL);		// terminate the main thread 
}

Client:
#include <unistd.h> // / header for unix specic functions declarations : fork(), getpid(), getppid(), sleep()
#include <stdio.h>  // header for input and output from console : printf, perror
#include <sys/socket.h> // header for socket specific functions and macros declarations
#include <stdlib.h> // header for general functions declarations: exit() and also has exit macros such as EXIT_FAILURE - unsuccessful execution of a program
#include <netinet/in.h> //header for MACROS and structures related to addresses "sockaddr_in", INADDR_ANY 
#include <string.h> // header for string functions declarations: strlen()
#include <arpa/inet.h> // header for functions related to addresses from text to binary form, inet_pton 

#define PORT 5564

int main()
{
  int sock = 0, valread;
  struct sockaddr_in serv_addr; // structure for storing addres; remote server ip and port 
  
  // Creating socket file descriptor with communication: domain of internet protocol version 4, type of SOCK_STREAM for reliable/conneciton oriented communication, protocol of internet 
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) // checking if socket creation fail
  {
    printf("\n Socket creation error \n");
    return -1;
  }

  // setting the address to connect socket to server
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);

    // Convert IPv4 and IPv6 addresses from text to binary form and set the ip
    //This function converts the character string 127.0.0.1 into a network
    // address structure in the af address family, then copies the
    // network address structure to serv_addr.sin_addr
  if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) // check if conversion failed
  {
    printf("\nInvalid address/ Address not supported \n");
    return -1;
  }

  // connect the socket with the adddress and establish connnection with the server 
  if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)
  {
    printf("\nConnection Failed \n");
    return -1;
  }

  // variable such as message buffers to receive and send messages
  char message[1024]={0}; // to send message to server
  char message2[1024]={0}; // to receive message from server
  char message3[1024]={0};
  char message4[1024]={0};

  int j = snprintf(message, 1024, "Client connected to server! Hello!"); // puts string into buffer
	// printf("\nThe number of bytes printed to 'message2' (excluding the null terminator) is %d\n", j);
  send(sock,message,strlen(message),0); // send message to server

  recv(sock,message2,sizeof(message2),0); // receive message from server
  printf("\nClient Received message from server on socket %d, here is the message : %s\n",sock, message2); // print the message received

//read array of integers
printf("Please input arrays of integers split by space:\n");
char ch;
int i=0;
while (1){
    ch = getchar();
    if (ch == '\n'){
        break;
    }
    message3[i] = ch;
    i++; 
}
    message3[i] = '\0';

    send(sock,message3,strlen(message3),0); // send message to server

   recv(sock,message4,sizeof(message4),0);
   printf("The sum computed in server is:%s\n",message4);
  
   close(sock); // close the socket/end the conection

}


