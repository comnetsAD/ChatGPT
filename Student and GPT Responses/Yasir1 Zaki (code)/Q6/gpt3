The user will continue playing until the tiles are in order, in our case that would be the numbers in order starting from 1 to 15. Hint: you can have another board with the correct solution and check if the user board is the same as the solution one.


import random

def create_board(num_rows, num_cols):
    board = [[(r * num_cols) + c + 1 for c in range(num_cols)] for r in range(num_rows)]
    board[-1][-1] = 0
    return board

def shuffle_board(board):
    # shuffle the rows
    random.shuffle(board)
    # shuffle the columns within each row
    for row in board:
        random.shuffle(row)

def print_board(board):
    for row in board:
        for col in row:
            if col == 0:
                print("  ", end="")
            else:
                print(f"{col:2d} ", end="")
        print()

def move_tile(board, row, col):
    # find the position of the empty tile
    for r in range(len(board)):
        for c in range(len(board[0])):
            if board[r][c] == 0:
                empty_row = r
                empty_col = c
                break
    
    # check if the chosen tile is adjacent to the empty tile
    if abs(empty_row - row) + abs(empty_col - col) != 1:
        return False

    # swap the chosen tile with the empty tile
    board[empty_row][empty_col] = board[row][col]
    board[row][col] = 0
    return True


def main():
    # create the puzzle board
    board = create_board(4, 4)
    # shuffle the puzzle
    shuffle_board(board)
    # print the initial board
    print_board(board)

    while True:
    # ask the user for a tile to slide
    row, col = input("Enter the row and column of the tile you want to slide (e.g. 2 3): ").split()
    row, col = int(row), int(col)

    # check if the chosen tile can be moved
    if not can_move(board, row, col):
        print("This tile cannot be moved. Please try again.")
        continue

    # move the tile into the empty space
    move_tile(board, row, col)

    # print the board after the move
    print_board(board)

    # check if the puzzle has been solved
    if board == create_board(4, 4):
        print("Congratulations, you have solved the puzzle!")
        break

if name == "main":
	main()



