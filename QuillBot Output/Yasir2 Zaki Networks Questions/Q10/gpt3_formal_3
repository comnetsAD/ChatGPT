L / R seconds is the time required to send a packet of L bits across a connection with a transmission rate of R bps. The total transmission time from Host A to Host B is the sum of the transmission times for each of the three connections. Therefore, the total time required for file transmission is: T = (L / R) + (L / R) + (L / R) = 3 * (L / R) We want to decrease the overall amount of time T, hence we must minimize L. Since L = 80 + S, the value of S must be minimized. To decrease the value of S, it is necessary to identify the value of S that minimizes the packet size L while still allowing the file to be sent. Since the file is composed of S-bit segments, we must guarantee that S is big enough to send the complete file. If N represents the number of file segments, then the overall file size is N * S bits. To transfer the complete file, we must ensure that S >= F / N. Therefore, to reduce the time required to transfer the file from Host A to Host B, we must choose the value of S that meets the two requirements below: 1. S >= F / N (to transfer the complete file) (to transmit the entire file) 2. S is the smallest feasible size (to minimize the packet size L) These constraints may be satisfied by making S equal to the maximum of F / N. A number's ceiling is the lowest positive integer that is bigger than or equal to the number. For instance, the ceiling of 3.2 is 4, whereas that of 4.9 is 5. The math.ceil function in Python may be used to compute the ceiling of a number: Copy and paste math code math.ceil(F / N) = S This will guarantee that S is sufficiently enough to transfer the complete file, while remaining as modest as feasible to reduce the packet size L. 