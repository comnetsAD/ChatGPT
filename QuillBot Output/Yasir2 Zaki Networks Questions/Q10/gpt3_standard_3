L / R seconds are needed to transport a packet of L bits across a connection with a transmission rate of R bps. The sum of the transmission times for each of the three connections is the overall time required to transport the file from Host A to Host B. As a result, the following is how long it takes to transfer the file: T = (3 * (L / R) (L / R) + (L / R) + (L / R) Because we want to reduce the overall amount of time T, we also want to reduce the value of L. S should be kept to a minimum since L = 80 + S. Finding the value of S that reduces the packet size L while enabling the transmission of the file is necessary to decrease the value of S. We must make sure that S is big enough to send the complete file since the file is built up of segments of S bits. The overall size of the file is N * S bits if N is assumed to be the number of file segments. Therefore, we need S >= F / N in order to transfer the complete file. Therefore, in order to reduce the time it takes to transfer a file from Host A to Host B, we must choose a number for S that meets the two criteria listed below: 1. S >= F / N (to transfer the complete file) (to transmit the entire file) S is as little as it can get (to minimize the packet size L) By putting S equal to the maximum value of F / N, we may meet these requirements. The lowest integer larger than or equal to a number is the number's ceiling. The ceiling of 3.2, for instance, is 4, while the ceiling of 4.9, is 5. The math.ceil function in Python may be used to determine a number's ceiling: Code import copy math Math.ceil(F / N) = S This will make sure that S is both big enough to send the complete file and tiny enough to reduce the packet size L. 