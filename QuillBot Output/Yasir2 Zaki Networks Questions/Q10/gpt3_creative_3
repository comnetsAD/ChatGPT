If your link's data rate is R bps, then it will take L / R seconds to send a packet containing L bits. The total amount of time it takes to send the file from Host A to Host B is the sum of the times it takes to send the file through each of the three connections. As a result, the total time required to send the file is: T = 3 * (L / R) which is equal to (L / R) 3. To achieve our goal of reducing total time T, we must reduce L. We want to find the smallest possible value of S such that L = 80 + S. We want to determine the smallest possible value of S that will still allow us to send the file without increasing the size of each packet more than necessary. Files are often broken up into chunks of S bits in size, therefore we need to be sure that S can accommodate the complete file. If the file is divided into segments and N is the total number of segments, then the file size is N * S bits. Therefore, we need S >= F / N to send the complete file. Since we want to reduce the time it takes to transfer the file from Host A to Host B, we must choose a value of S such that the two requirements below are met: 1. S >= F / N (to transfer the complete file) (to transmit the entire file) The smallest possible size of S is 2 (to minimize the packet size L) By putting S equal to the maximum of F / N, we may achieve these conditions. A number's ceiling is the lowest integer that is bigger than or equal to that number. The highest possible score is 5, while the minimum is 3.2. To determine the maximum value of an integer in Python, we may use the math.ceil function. Input code, have it import math In this case, S = math.ceil(F / N). This will make S big enough to send the whole file, but small enough to keep the packet size L to a minimum. 