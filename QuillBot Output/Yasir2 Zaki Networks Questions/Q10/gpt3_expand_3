On a network that has a transmission rate of R bps, the amount of time in seconds that it takes to send a packet that contains L bits is equal to L divided by R. The total amount of time necessary to send the file from Host A to Host B is equal to the sum of the amounts of time necessary to send the file via each of the three connections. As a result, the following is the sum total amount of time required to send the file: T = (L / R) + (L / R) + (L / R) = 3 * (L / R) Because we wish to cut down on the overall amount of time (T), we need to reduce the amount of time (L). Given that L is equal to 80 plus S, our goal is to get the lowest possible value for S. In order to reduce the value of S, we must first locate the value of S that reduces the size of the packet L to the smallest possible size while still allowing us to send the file. Given that the file is constructed from subsets of S bits, we have to make sure that the value of S is sufficient to enable the transmission of the whole file. If we take the number of segments in the file to be N, then the overall size of the file is equal to N bits multiplied by the number of segments in the file. Therefore, in order to send the whole file, we require S to be greater than or equal to F/N. Because of this, in order to reduce the amount of time it takes to transfer the file from Host A to Host B, we need to choose a number for S that meets two requirements, which are as follows: 1. S >= F / N (to transfer the complete file) (to transmit the entire file) 2. The letter S is as short as it can be (to minimize the packet size L) By adjusting S such that it is equal to the maximum value of F/N, we may fulfill these criteria. The lowest integer that is bigger than or equal to a given number is considered to be that number's ceiling. For instance, the maximum possible value for 3.2 is 4, while the maximum possible value for 4.9 is 5. To determine the maximum value that may be attained by an integer, we can make use of the math.ceil function in Python. Math and code will be imported. S is equal to math.ceil(F / N). This will guarantee that S is big enough to send the complete file, while simultaneously ensuring that it is as tiny as feasible in order to decrease the packet size L. 