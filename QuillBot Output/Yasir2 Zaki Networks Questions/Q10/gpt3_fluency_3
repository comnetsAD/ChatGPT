The time it takes to send a packet of L bits across a network with a transmission rate of R bits per second is L / R seconds. The total time required to send the file from Host A to Host B is the sum of the transmission times for the three connections. As a result, the total time required to transfer the file is: T = (L/R) + (L/R) + (L/R) + (L/R) = 3 * (L/R) We want to reduce the total time T, therefore we reduce the value of L. We aim to decrease the value of S since L = 80 + S. To reduce the value of S, we must discover the value of S that reduces the packet size L while still allowing us to send the file. Because the file is built up of S-bit segments, we must guarantee that S is big enough to send the complete file. If N is the number of segments in the file, then the overall file size is N * S bits. As a result, S >= F / N is required to send the complete file. To minimize the time in sending the file from Host A to Host B, we must choose a value of S that meets the following two conditions: 1. S >= F / N (to transfer the complete file) (to transmit the entire file) 2. S is as little as it can be (to minimize the packet size L) We may meet these criteria by setting S to the maximum of F / N. A number's ceiling is the lowest integer that is bigger than or equal to the number. The ceiling of 3.2, for example, is 4, while the ceiling of 4.9 is 5. To get the ceiling of an integer in Python, use the math.ceil function: Import math by copying code S = F / N math.ceil This ensures that S is big enough to send the complete file while being as small as feasible to keep the packet size L to a minimum. 