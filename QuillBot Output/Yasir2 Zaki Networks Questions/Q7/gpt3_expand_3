The first step in finding the 1s complement of the sum of the three 8-bit bytes 01010011, 01100110, and 01110100 is to determine the sum of the bytes themselves. In order to do this, we need to first convert each byte to a decimal number and then add all of those numbers together. 01010011 may be written as the decimal representation of this number as follows: 1 * 27 + 0 * 26 + 1 * 25 + 0 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 1 * 20 = 83 01100110 may be written as the following in decimal notation: 1 * 27 + 1 * 26 + 0 * 25 + 0 * 2 4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 1 * 2^0 = 102 01110100 may be written as the following in decimal notation: 1 * 27 + 1 * 26 + 1 * 25 + 1 * 2 4 + 0 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 0 * 2^0 = 116 The total value of the three bytes is 301, which can be written as 83 + 102 + 116. It is necessary to determine the sum's 2s complement before we can proceed with finding its 1s complement. To do this, we need to first add one to the total, then change all of the bits in the sum such that 1s become 0s and 0s become 1s. The 2s complement of the number 301 may be produced by flipping all of its bits in the following order: 301 equals 1's complement, which is equal to 11101100. The 2s complement of 301 may be obtained by adding 1 to the result, which gives us 11101100 plus 1 to get 11101101. In order to get the 1s complement of the total, all we need to do is flip the bits that make up the 2s complement: 11101101 equals the 1s complement of 301, which is equal to 00010010. Therefore, 00010010 is the 1s complement of the total of the three 8-bit bytes that are 01010011, 01100110, and 01110100. Both UDP and TCP employ the 1s complement approach for their checksums because it makes it simple for the receiver to identify any problems that may have occurred. It is possible for the receiver to recalculate the checksum by using the identical approach that was used by the sender when the checksum was calculated and sent along with the data. 