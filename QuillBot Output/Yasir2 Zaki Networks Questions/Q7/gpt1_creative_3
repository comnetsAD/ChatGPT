The total of the three 8-bit bytes must be determined before determining its 1's complement. It is possible to compute the total number of bytes in this way: 01010011\s+01100110\s+01110100\s10111001 (137 in decimal) (137 in decimal) After flipping all of the bits, we get the 1's complement of this total, which is: 01000110 (70 in decimal) (70 in decimal) These three 8-bit bytes have been added together, and the result is their 1's complement. Since the receiver may easily discover problems by adding the checksum to the total of the bytes being transferred, the 1's complement of the sum is used in checksums for both UDP and TCP. It is safe to assume that no mistakes were made if the result is a binary integer consisting entirely of 1. If there are no mistakes in the data being transferred, the outcome of the receiver adding up all of the bytes to be transmitted and the checksum should be a binary integer consisting entirely of ones. If the result is not a binary integer consisting entirely of 1, an error has occurred, and the message must be repeated. Take the following message as an illustration: Checksum: 01010011 +01100110 +01110100 +01000110 (255 in decimal) When the recipient adds the checksum to the total amount of bytes being transferred, the result is a binary number consisting entirely of 1. This means the transmission was received without any problems. Instead, think about this message that was sent: 01010011\s+01100110\s+01110100\s+01000111 An error occurred during the checksum calculation. 00000000 (0 in decimal) (0 in decimal) Here, the receiver adds the checksum to the total amount of bytes being delivered, and that total is not a binary integer consisting entirely of 1. If you see this, it means the transmission failed and has to be resent. 