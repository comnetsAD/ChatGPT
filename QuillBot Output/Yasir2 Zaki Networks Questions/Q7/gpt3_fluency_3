To calculate the 1s complement of the sum of the three 8-bit bytes 01010011, 01100110, and 01110100, we must first compute the sum of the bytes. We may do this by converting each byte to a decimal number and adding them together. 01010011 is the decimal equivalent of: 1 * 27 + 0 * 26 + 1 * 25 + 0 * 24 + 0 * 25 + 0 * 24 + 0 * 23 + 0 * 22 + 0 * 21 + 0 * 20 = 83 01100110's decimal equivalent is: 1 * 27 + 1 * 26 + 0 * 25 + 0 * 2 4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 1 * 2^0 = 102 01110100's decimal equivalent is: 1 * 27 + 1 * 26 + 1 * 25 + 1 * 2 4 + 0 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 0 * 2^0 = 116 The three bytes add up to 83 + 102 + 116 = 301. To determine the 1s complement of the sum, we must first calculate the sum's 2s complement. To do this, we may invert all of the sum's bits (turning 1s to 0s and 0s to 1s) and add 1 to the result. By inverting all of 301's bits, the 2s complement is obtained: 11101100 = 1's complement of 301 The result may then be multiplied by 1 to get the 2s complement of 301: 11101100 + 1 = 11101101 To obtain the sum's 1s complement, just invert all the bits of the 2s complement: 11101101 = 301's complement = 00010010 As a result, the total of the three 8-bit bytes 01010011, 01100110, and 01110100 equals 00010010. Because it helps the receiver to readily identify problems, UDP and TCP employ the 1s complement technique for their checksums. When the sender calculates and delivers the checksum along with the data, the receiver may recalculate it using the same process. 