First, we need to determine the total value of the three 8-bit bytes: 01010011, 01100110, and 01110100. Each byte may be converted to a decimal number and then added to the total. 01010011 is written as 83 in decimal notation, which is calculated as follows: 1 * 27 + 0 * 26 + 1 * 25 + 0 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 1 * 20 01100110 can be written as 1e+2s+7+2s+6+0e+2s+5e+0x in decimal. 4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 1 * 2^0 = 102 01110100 is written as: 1 * 27 + 1 * 26 + 1 * 25 + 1 * 2 4 + 0 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 0 * 2^0 = 116 Three bytes equal 301 when added together (83 + 102 + 116). A 1s complement of a sum may be calculated by first determining its 2s complement. We may do this by adding 1 to the total after inverting all the bits of the sum (1s to 0s and 0s to 1s). All of 301's bits must be inverted to get its 2s complement: The complement of 301 is 11101100, therefore 301 = 11101100. The 2s complement of 301 is then obtained by adding 1 to the result: 11101100 + 1 = 11101101 Simply inverting all the bits in the 2s complement yields the 1s complement of the total. 1s complement of 301 is 00010010, or 11101101. The 1s complement of the three 8-bit bytes 01010011, 01100110, and 01110100 is therefore 00010010. The 1s complement technique is used for checksums in both UDP and TCP because it facilitates error detection at the receiving end. A checksum may be easily recalculated by the receiver if the sender computes and includes it with the sent data. 