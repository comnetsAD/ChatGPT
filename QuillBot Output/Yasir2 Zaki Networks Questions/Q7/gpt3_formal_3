To get the 1s complement of the sum of the three 8-bit bytes 01010011, 01100110, and 01110100, we must first determine their sum. To do this, each byte may be converted to a decimal number and added together. 01010011 converted to decimal: 1 * 27 + 0 * 26 + 1 * 25 + 0 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 1 * 20 = 83 The decimal representation of 01100110 is as follows: 1 * 27 + 1 * 26 + 0 * 25 + 0 * 2 4 + 1 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 1 * 2^0 = 102 01110100 is the decimal equivalent of 1 * 27 + 1 * 26 + 1 * 25 + 1 * 2. 4 + 0 * 2^3 + 1 * 2^2 + 0 * 2^ 1 + 0 * 2^0 = 116 The total of the three bytes is 301, which is 83 + 102 + 116. To get the 1s complement of the total, we must first determine the sum's 2s complement. To do this, we may invert the sum's bits (1s to 0s and 0s to 1) and add 1 to the result. 301's 2s complement is derived by inverting all of its bits: 1's complement of 301 is 11101100. The 2s complement of 301 may then be obtained by adding 1 to the result: 11101100 + 1 = 11101101 To get the sum's 1s complement, we need just invert all the bits in the 2s complement. 11101101 is 1's complement of 301, which equals 00010010 The 1s complement of the three 8-bit bytes 01010011, 01100110, and 01110100 is thus 00010010. UDP and TCP employ the 1s complement approach for their checksums because it enables error detection by the recipient. When the sender calculates the checksum and includes it with the data, the receiver may recalculate it using the same procedure. 