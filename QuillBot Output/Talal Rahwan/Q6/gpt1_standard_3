Since C++ function templates are general, a single function may operate on a variety of data types without the requirement for type casting or explicit function overloading. This makes the code more reusable and reduces the amount of code that has to be created since a single function template may be used to work on a variety of data types. Additionally, since the compiler creates a tailored version of the function for each data type utilized at build time, function templates enable more effective code execution. By doing this, runtime type checking and type casting overhead is removed. 