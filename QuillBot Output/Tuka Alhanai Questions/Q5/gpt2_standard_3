A programming paradigm known as object-oriented programming is one that emphasizes the usage of objects and their interactions in software design and development. In object-oriented programming, the classes are arranged into a hierarchy of inheritance, and the program is made up of objects, which are instances of those classes. Each object has its own state, behavior, and methods for interacting with other objects. A non-object-oriented programming paradigm, commonly referred to as structured or procedural programming, focuses on using functions and processes to create and develop software. In structured programming, a program is made up of a series of instructions that are grouped into reusable code blocks called procedures and functions. There is no data encapsulation, and the program's state is shared by all of the procedures and functions. In conclusion, the way the code is organized and structured differs significantly between an object-oriented approach to programming and a non-object-oriented approach. Code is organized around objects, which are instances of classes, in object-oriented programming, with an emphasis on how these objects interact with one another. Non-object-oriented programming focuses on the program's control flow and arranges the code around procedures and functions. In contrast to non-object-oriented programming, object-oriented programming provides for data encapsulation and abstraction, which makes it simpler to comprehend and maintain. 