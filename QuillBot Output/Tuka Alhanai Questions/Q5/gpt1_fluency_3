An object-oriented approach to programming is a programming paradigm that places an emphasis on the design and creation of software via the usage of objects and the relationships between those objects. Object-oriented programming is characterized by the fact that the actual program is made up of objects, each of which represents an instance of a class. The classes themselves are structured in the form of an inheritance hierarchy. Every object has its own unique state and set of behaviors, and they communicate with one another through methods and messages. A non-object-oriented approach to programming, also known as structured or procedural programming, is a paradigm of computer programming that places an emphasis on the utilization of procedures and functions in the design and composition of software. This type of programming is distinguished by its lack of an object-oriented orientation. In structured programming, a program is not only made up of a series of individual instructions, but it is also broken down into different procedures and functions, which are individual chunks of code that may be reused. There is no data encapsulation, and the program's state is visible to all of the procedures and functions at all times. In a nutshell, the method in which an object-oriented approach to programming and a non-object-oriented approach arrange and structure the code is the primary distinction between the two approaches. Object-oriented programming arranges code around objects, which are specific examples of a class's characteristics, and places an emphasis on how objects communicate with one another. The emphasis of non-object-oriented programming is on the flow of control through the program rather than the organization of the code around procedures and functions. Non-object-oriented programming, on the other hand, does neither permit the encapsulation of data nor the abstraction of information; both of these features contribute to making the code simpler to comprehend and keep up to date. 