Using a method similar to binary search is one way to locate a local minimum of the whole binary tree T while limiting the number of probes to the nodes of T to just O(log n) in total: Probe the nodes that are located in the center of the tree by beginning your investigation in the middle level of the tree, which contains those nodes. Examine the relationship between the values of the probed nodes and the values of their parent nodes. If the value of a probed node is lower than that of its parent node, go to that node's left subtree. Move to the right subtree of a probed node if the value of that node is larger than that of its parent node. Continue to iterate through step 2 in a recursive manner until you hit a leaf node that represents a local minimum. Because we only need to look in the left or right subtree to get the local minimum when we use this strategy, we can get rid of half of the tree in each phase. Because the tree is full, it has log(n) levels; hence, the number of probes required to locate the local minimum is also log(n). For instance, in order to locate a local minimum in a binary tree with all four levels complete, we would need no more than three probes. We would begin by probing the middle nodes located at the second level of the tree, then go on to the middle node located at the third level of the tree, and lastly move on to the leaf node located on the left or right side of the tree (which will be the local minimum if it exists) It is important to note that this strategy is only doable if we already have information on the middle level of the tree, which may be determined using operations with a complexity of O(log n). 