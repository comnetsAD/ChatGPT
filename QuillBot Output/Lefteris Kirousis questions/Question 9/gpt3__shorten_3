You are given a whole binary tree, T, with just an implicit labeling specification: for each node v, you may find out its value, xv, by interrogating it. Prove that O(log n) probes to the nodes of T are sufficient to locate a local minimum. Applying a binary search technique might help locate a local minimum in the whole binary tree T. Get going at the tree's very bottom center node. Examine the current node's value in relation to that of its parents and siblings. We consider the present node to be a local minimum if its value is smaller than that of its parent and siblings. If the current node's value is larger than that of its parent, we know that the local minimum is in the left subtree of the current node, thus we go to the center node of the left subtree. The local minimum is in the right subtree of the current node, therefore if the value of the current node is smaller than its parent, we shift to the middle node of the right subtree. To find a local minimum, it is necessary to iteratively repeat stages 2â€“4. Since we only need to search the subtree where the local minimum may reside, this method also enables us to remove half of the tree at each stage. We just require log(n) probes to get the local minimum since the tree is full and has height log(n). In a full binary tree with four levels, for instance, we would require no more than four probes to locate the minimum. The center node of the final level would be probed first, followed by the middle node of the left or right subtree (depending on which one is bigger), then the middle node of the left or right subtree of the subtree, and lastly the left or right grandchild (which will be the local minimum if it exists). 