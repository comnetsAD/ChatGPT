You are given a full binary tree T, but the labeling is only stated implicitly: you may obtain the value xv for any node v by probing the node v. Demonstrate how to discover a local minimum of T using just O(log n) probes to T nodes. A binary search technique might be used to determine a local minimum of the whole binary tree T. Begin at the node in the center of the tree's last level. Compare the current node's value to the values of its parent and siblings. If the current node's value is smaller than the sum of its parent and siblings, it is a local minimum, and we return it. If the current node's value is larger than its parent, we know that the local minimum is in the current node's left subtree, thus we go to the middle node of the left subtree. If the current node's value is smaller than its parent, we know that the local minimum is in the current node's right subtree, thus we go to the middle node of the right subtree. Steps 2â€“4 should be repeated recursively until a local minimum is identified. Because we only need to search the subtree where the local minimum may reside, we can remove half of the tree in each phase. Because the tree has a height log(n), we only need log(n) probes to discover the local minimum. In a four-level full binary tree, for example, we would only need four probes to discover a local minimum. First, we would probe the previous level's middle node, then the middle node of the left or right subtree (depending on which is smaller), then the middle node of the subtree's left or right subtree, and lastly the left or right grandchild (which will be the local minimum if it exists). 