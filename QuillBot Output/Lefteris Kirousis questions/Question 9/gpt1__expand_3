We can utilize a divide-and-conquer strategy in order to discover a local minimum of the whole binary tree T. This will allow us to do so more quickly. Begin with the first node that will be investigated, which is the root of the tree. When compared to the values of its left and right offspring, the root's value should be evaluated and compared. We consider this to be a local minimum and return it if the value of the root is lower than either of the root's children. In the event that this is not the case, we go to the subtree in which the value of the root is higher than that of the child, and then we repeat step 2. It is necessary to go through step 2 in a recursive manner until a local minimum is discovered. Due to the fact that this strategy only requires us to search the subtree that has the potential for the local minimum, we are able to remove half of the tree at each stage. Because the tree is full, its height is log(n), and because of this, we require just log(n) probes in order to locate the local minimum. For instance, in order to locate a local minimum in a binary tree with four levels and all possible branches, we would need a maximum of four probes. We would start by probing the root, then go on to the left or right kid (depending on which one is younger), then move on to the left or right grandchild (again, depending on which one is younger), and lastly move on to the left or right great-grandchild (which will be the local minimum if it exists). 