A local minimum of the whole binary tree T may be found using an O(log n)-probe depth traversal of the tree's nodes. Examine the nodes in the tree's center section as a starting point. Evaluate the probed nodes by contrasting their values with those of their parents. Move to the left subtree of a probed node if its value is smaller than that of its parent node. If the probed node's value is larger than that of its parent node, then the node should be traversed to the correct subtree. Iterate step 2 recursively until a local minimum is found at a leaf node. Since we only need to search the left or right subtree where the local minimum may be found, we can get rid of half the tree at a time using this method. We only need log(n) probes to discover the local minimum since a full tree has log(n) levels. In a full binary tree with four levels, for instance, we would require no more than three probes to locate a minimum value. We would start by probing the nodes in the center of the tree's second level, then go on to the middle nodes of the tree's third level, and ultimately the nodes in the tree's left or right leaves (which will be the local minimum if it exists) An important caveat is that we need to know the tree's middle level in order to use this method; if we don't, we'll have to resort to a time-consuming and error-prone O(log n) calculation. 