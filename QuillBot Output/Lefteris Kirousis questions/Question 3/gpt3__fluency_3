The assertion is correct. To demonstrate this point, let us suppose that f(n) is O(g(n)), which means that there exist positive constants c1 and n1 such that for any n > n1, f(n) = c1 * g. (n). As a result, 2f(n) = 2c1 * g(n) for every n > n1. So, by choosing c= 2c1 and n0 = n1, we can argue that 2f(n) equals O(2g(n)). It is vital to remember that the big O notation compares the pace of development of two functions rather than their actual values, therefore this statement is correct. The rate of development of a function is not affected by multiplying or dividing it by a constant. 