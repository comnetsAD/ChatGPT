This is how the algorithm works: Perform a breadth-first search (BFS) beginning at node s, noting the separation between each node and s. It takes this step O(m + n) time. Run a second BFS starting at node t1, and note the separation between each node and t1. The duration of this phase is O(m + n). Run a third BFS starting from node t2, and note the separation between each node and t2. The duration of this phase is O(m + n). Go through each node iteratively and choose the node u that meets the requirements below: The gap between u and s is as wide as it can be. The distance between s and t1 is equal to or less than the length of the route from s to t1 that includes u. The distance of s from t2 is not larger than the length of the route from s to t2 that includes u. Bring back the node u. The method requires O(m + n) time since it executes three BFS, each of which requires O(m+n) time. 