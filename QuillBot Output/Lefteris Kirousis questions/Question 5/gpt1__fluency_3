The following is the algorithm: Begin a breadth-first search (BFS) from node s and note the distance between each node and s. This step takes O(m + n) seconds. Run a second BFS from node t1 and record the distance from t1 of each node. This phase requires O(m + n) time as well. Run a third BFS from node t2 and note the distance between each node and t2. This phase requires O(m + n) time as well. Iterate over all of the nodes and choose the node u that meets the following criteria: The distance between u and s is as great as feasible. The length of the route from s to t1 that includes u is equal to the distance between s and t1. The length of the route from s to t2 that includes u is equal to the distance between s and t2. Return the uth node. The method takes O(m + n) time since it performs three BFS, each of which requires O(m+n) time. 