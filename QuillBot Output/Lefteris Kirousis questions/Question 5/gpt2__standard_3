This is how the algorithm works: Start a BFS (breadth-first search) from node s. Start a new BFS from node t1, then. Execute a third BFS beginning at node t2. Find the node u in the graph that is the farthest away from the origin (s), yet for which the total of the distances from s to t1 and t2 through u is not higher than the distance between s and t1 and t2. This approach requires three BFS searches, each of which takes O(n+m) time. After that, it iterates over all the nodes, which requires O(n) time. The total time complexity is thus O(3(n+m)), which is O. (m). 