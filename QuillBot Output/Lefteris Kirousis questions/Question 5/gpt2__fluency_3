The following is the algorithm: Begin a Breadth-First Search (BFS) using node s. Repeat the BFS process, beginning with node t1. Perform a third BFS beginning at node t2. Iterate over all the nodes in the graph to locate the node u with the greatest distance from s, but whose total of the distances from s to t1 and s to t2 through u is not larger than s's distance from t1 and t2. This method requires O(m) time because it does three BFS searches that take O(n+m) time each, followed by an O(n) time iteration across all nodes. As a result, the entire time complexity is O(3(n+m)), which is O(1) (m). 