To determine the shortest pathways from s to any other node t when the lengths of the edges are substituted by 2le + 1, one method would be to utilize a modified version of Dijkstra's algorithm. This would be one of many conceivable approaches. The fundamental concept is the same as the one behind the original version of Dijkstra's algorithm; the only difference is that the relaxation step has been subject to a minor adjustment. Instead of relaxing the edges by updating the distance of a vertex to be equal to the sum of the distance of the previous vertex and the weight of the edge, we would update the distance to be equal to the sum of the distance of the previous vertex and (2le + 1) of the weight of the edge. This would result in a smoother, more aesthetically pleasing result. Then, in order to maintain track of the vertex that is the least distant from the source vertex or vertex sets, we would utilize a priority queue that was implemented as a min-heap data structure. The method will continually choose the vertex v from the priority queue that has the shortest distance, and it will then update the distances of all the vertices that are close to v by loosening the edge constraints (v,u). Once all of the vertices have been processed, the algorithm will have decided, taking into account the new weights (2le + 1), which are the shortest routes from s to all of the other vertices in the graph. 