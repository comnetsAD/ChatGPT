I suggest a divide and conquer linear time prune and search method for this issue. The program pairs cards randomly and uses the equivalence tester to evaluate whether each pair is equal. If so, we discard one card and retain one. If not, discard both cards. Repeat until a few cards remain. The algorithm starts by pairing n cards. If n is odd, couple the first n-1 cards and leave the final card unpaired. Next, we utilize the equivalency tester to compare each pair of cards. If so, we discard one card and retain one. If not, discard both cards. Repeat until a few cards remain. We have a few cards left, so we can use the equivalence tester to see whether they are all equal. If so, we have identified more than n/2 comparable cards. If not, no collection of more than n/2 cards is equal. A contradiction proves this algorithm works. If most cards are equal, but the algorithm cannot locate more than n/2 equivalent cards, This contradicts the idea that most cards were discarded during trimming. If most cards are comparable, the method will uncover more than n/2 equivalent cards. When n is odd, we couple the first n-1 cards and leave the last unpaired. Whether we have an odd number of cards after pruning, we may verify if the final card is comparable to the majority. This approach is linear since we simply pair and test the cards once and prune fewer cards each iteration. Due to divide and conquer and proof by contradiction, this method will locate a representation of the majority of comparable cards if it exists. 