A counterexample may be used to demonstrate that the assertion is not always accurate; this may be the case. Taking into consideration the equations f(n) = n2 and g(n) = n allows one to design a counterexample. Because f(n) is less than c1 times g(n) when n is more than n1 times 1, it is obvious that f(n) has the value O(g(n)). However, log f(n) = 2 log n, but log g(n) = log n. Because it increases more quickly than log n, 2 log n cannot be represented by O(log n), and hence, log f(n) cannot be represented by O(log g(n)). Another example might be the expressions f(n) = 2n and g(n) = n! where f(n) is equivalent to O(g(n)), but log f(n) equals n log2 is not equivalent to O(log g(n)) = log(n! ), since log2 is a faster algorithm than log g(n). It is important to point out that the O notation gives an upper constraint on the rate of development of a function, and that the connection between two functions, f and g, does not necessarily imply that there is a corresponding relationship between log f and log g. Both of these points are worth emphasizing. 