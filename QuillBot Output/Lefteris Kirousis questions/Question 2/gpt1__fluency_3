As shown by counterexample, the assertion is not always true. Consider f(n) = n2 and g(n) = n to create a counterexample. It is obvious that f(n) is O(g(n)) since f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1. Log f(n) = 2 log n, but log g(n) = log n. As a result, 2 log n is not O(log n), and log f(n) is not O(log g(n)). In certain circumstances, such as g(n) = n2 and f(n) = n3, log f(n) equals O(log g(n)) since log f(n) = 3 log n and log g(n) = 2 log n. It is worth noting that the big O notation compares the rates of growth of functions and does not account for the base of the logarithm function. 