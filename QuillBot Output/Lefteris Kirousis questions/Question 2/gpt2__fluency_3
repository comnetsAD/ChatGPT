The assertion is not always correct. The reason for this is because logarithms are used to adjust the scale of the function, while big O notation is used to compare the rate of growth of two functions. As a result, the link between f(n) and g(n) does not always imply the relationship between log f(n) and log g(n) (n). f(n) = n2 and g(n) = n are two examples of counterexamples. It is obvious that f(n) is O(g(n)), since f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1. Log f(n) = 2 log n, but log g(n) = log n. As a result, 2 log n is not O(log n), and log f(n) is not O(log g(n)). Another case in point is f(n) = 2n and g(n) = n! where f(n) = nlog2 is not O(log g(n)) = log(n!) To summarize, the statement "If f(n) is O(g(n), then log f(n) is O(log g(n)") is not necessarily true, and counterexamples may be presented to invalidate it. 