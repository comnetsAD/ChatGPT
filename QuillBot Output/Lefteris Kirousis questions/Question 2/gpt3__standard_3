The claim is not necessarily true; a counterexample may refute it. By taking into account f(n) = n2 and g(n) = n, a counterexample may be created. Given that f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1, it is evident that f(n) is O(g(n)). While log g(n) = log n, log f(n) = 2 log n. Because 2 log n grows more quickly than log n, it is not O(log n), and as a result, log f(n) is not O(log g(n)). An additional example is f(n) = 2n and g(n) = n! with log f(n) = n yet f(n) is O(g(n) Due to the fact that the former is quicker than the later, log2 is not O(log g(n)) = log(n!) The link between two functions f and g does not always imply a comparable relationship between log f and log g, and O notation gives an upper constraint on the rate of development of a function. 