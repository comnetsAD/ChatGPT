The assertion is not always accurate, as the counterexample demonstrates quite clearly. Taking into consideration the equations f(n) = n2 and g(n) = n allows one to design a counterexample. Because f(n) is less than c1 times g(n) when n is more than n1 times n1, it is obvious that f(n) has the value O(g(n)). However, log f(n) = 2 log n, but log g(n) = log n Because of this, 2 log n is not the same as O(log n), and as a consequence, log f(n) is not the same as O(log g(n)). While in other circumstances like g(n) = n^2 and f(n) = n^3 then log f(n) equals O(log g(n)) since log f(n) = 3 log n and log g(n) = 2 log n It is important to point out that when comparing the rates of development of different functions, the big O notation does not take into consideration the base of logarithm function. This is an important distinction to make. 