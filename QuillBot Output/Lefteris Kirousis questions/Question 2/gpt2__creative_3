This is not always the case, thus the statement cannot be taken at face value. Logarithms are used to adjust the scale of the function, while the big O notation is used to compare the rate of growth of two functions. In light of this, it is not necessary to assume that log f(n) = log g(n) given that f(n) and g(n) have a connection (n). f(n) = n2 and g(n) = n are an obvious exception to this rule. With f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1, it is evident that f(n) is O(g(n)). Log f(n) = 2 log n, but log g(n) = log n. Consequently, log f(n) is not O(log g(n)) as 2 log n is not O(log n). F(n) = 2n and g(n) = n are another case in point. therefore log f(n) = nlog2 is not O(log g(n)) = log(n)! even if f(n) is O(g(n)). In summary, it is possible to produce counterexamples to the statement "If f(n) is O(g(n)) then log f(n) is O(log g(n))," which would show that this assertion is not necessarily true. 