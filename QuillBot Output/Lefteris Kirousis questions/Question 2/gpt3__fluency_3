The assertion is not necessarily true; a counterexample may refute it. Consider f(n) = n2 and g(n) = n to create a counterexample. It is obvious that f(n) is O(g(n)), since f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1. Log f(n) = 2 log n, but log g(n) = log n. As a result, 2 log n is not O(log n), since it grows faster than log n, and log f(n) is not O(log g(n)). Another case in point is f(n) = 2n and g(n) = n! f(n) = O(g(n)) yet log f(n) = n Log2 is not O(log g(n)) = log(n!) since the former is quicker. It is important to note that O notation gives an upper constraint on a function's rate of development, and the connection between two functions f and g does not always imply a corresponding relationship between log f and log g. 