Counterexamples refute the assertion. f(n) = n^2 and g(n) = n provide a counterexample. f(n) is O(g(n)) since f(n) <= c1 * g(n) for c1 = 1 and n > n1 = 1. Unlike log g(n), log f(n) = 2 log n. Since 2 log n grows faster than log n, log f(n) is not O(log g(n)). Similarly, f(n) = 2^n and g(n) = n! This is O(g(n)) but log f(n) = n. log2 is quicker than log(n!). O notation limits the pace of development of a function, and the connection between two functions f and g does not always imply a corresponding relationship between log f and log g. 