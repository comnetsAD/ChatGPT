A counterexample may show that the generalization is false. Using the functions f(n) = n2 and g(n) = n, one may build a counterexample. With f(n) = c1 * g(n) for c1 = 1 and n > n1 = 1, it is evident that f(n) is O(g(n)). Log f(n) = 2 log n, but log g(n) = log n. Since 2 log n grows more slowly than log n, log f(n) is not O(log g(n)). F(n) = 2n and g(n) = n are another case in point. whose log f(n) = n, but its f(n) counterpart is O(g(n)) As log2 is quicker than O(log g(n)), we cannot say that O(log g(n)) = log(n!). Notably, O notation gives us a ceiling on the rate of development of a function, and the fact that f and g are related does not entail that their logarithms are related in the same way is important to keep in mind. 