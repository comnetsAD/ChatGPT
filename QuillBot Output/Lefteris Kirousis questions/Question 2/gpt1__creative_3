A counterexample demonstrates that the assertion cannot be taken at face value. Using the functions f(n) = n2 and g(n) = n, one may build a counterexample. Since f(n) = c1 * g(n) for n > n1 = 1, it is evident that f(n) is O(g(n)). Whereas log g(n) = log n, log f(n) = 2 log n. Consequently, log f(n) is not O(log g(n)) as 2 log n is not O(log n). Although there are situations when log f(n) is O(log g(n)), such as when g(n) = n2 and f(n) = n3, where log f(n) = 3 log n and log g(n) = 2 log n. It's important to note that the base of the logarithm function isn't taken into consideration by the big O notation, which is a comparison of the rate of development of functions. 