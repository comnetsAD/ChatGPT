False. If the edge lengths are swapped out for 2le, the shortest routes from node s to any other node t may alter. An alternative example is the graph below, where each edge has been given a weight, le. +----1-—-+\s | |\ss +----2-—-+ t\s | |\s +——3——+ The path s -> t with a length of 1 is the shortest route between s and t. The shortest route is s->t with a length of 2, however, if the edge lengths are changed to 2le. Proof: The shortest route from a single source to every other vertex is found using the Dijkstra's shortest path algorithm. It employs a min-heap data structure that serves as the implementation of a priority queue. The distance from the source vertex s is a vertex's key in the priority queue. The method picks the vertex v repeatedly from the priority queue with the shortest key, and by relaxing the edge, updates the key of all vertices nearby to v. (v,u). The distance from any vertex to s stays constant when all edge weights are multiplied by a constant k, while the priority queue vertex's key is multiplied by k. The vertex that was the smallest before the multiplication will still be the smallest, albeit the min heap property is unchanged. Therefore, if the edge lengths are changed to 2le instead of the edge lengths, the shortest pathways from node s to any other node t may vary. 